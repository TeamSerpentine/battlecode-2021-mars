package mars;

/**
 * Class containing multiple constants and few utility spec dependent functions.
 */
public final strictfp class Constants {

    public static final boolean DEBUG = true;

    /**
     * Max distance squared within the map.
     */
    public static final int MAX_DISTANCE_SQUARED = 64 * 64;

    public static final int MINIMAL_BID = 3;

    public static final int LOST_SPAWN = -1;

    public static final int FLAG_MASK = 0b11111111_11111111_11111111;

    public static final int
            // universal flag constants
            F_M_ACTION                      = 0b111_000_00000000_00000000, // mask for action values
            F_V_COMMUNICATE_SPAWN           = 0b001_000_00000000_00000000, // indicates that a unit is transferring their spawnId
            F_V_NEW_BORDER                  = 0b010_000_00000000_00000000, // indicates that a unit wants to transfer a border location
            F_V_NEW_EC_COORDINATES          = 0b011_000_00000000_00000000, // indicates that a unit wants to transfer coordinates of a new EC
            F_V_NEW_EC_ID                   = 0b100_000_00000000_00000000, // indicates that a unit wants to transfer an id of a new EC
            F_B_COORDINATE_TYPE             = 0b000_000_00000000_10000000, // 0: X, 1: Y
            F_M_ID                          = 0b000_111_11111111_11111111, // mask for communicating ID values

            // EC specific flag constants
            F_B_EC_SCAN                     = 0b000_100_00000000_00000000, // swaps values after each completed EC scan cycle
            F_V_EC_SPAWN_POLITICIAN         = 0b001_000_00000000_00000000, // indicates that EC just spawned a politician
            F_V_EC_ATTACK                   = 0b010_000_00000000_00000000, // indicates that EC communicates an attack target
            F_V_EC_1_BORDER                 = 0b011_000_00000000_00000000, // indicates that EC communicates 1 border
            F_V_EC_2_BORDER                 = 0b100_000_00000000_00000000, // indicates that EC communicates 2 border

            // borders are communicated by 0btt_xxxxxxx where t indicates the type:
            F_V_BORDER_L                    =                0b00_0000000,
            F_V_BORDER_R                    =                0b01_0000000,
            F_V_BORDER_B                    =                0b10_0000000,
            F_V_BORDER_T                    =                0b11_0000000,

            F_V_POLITICIAN_TYPE_DEFENSIVE   = 0b000_000_00000000_00000000, // indicates that EC just spawned a defensive politician
            F_V_POLITICIAN_TYPE_OFFENSIVE   = 0b000_001_00000000_00000000, // indicates that EC just spawned an offensive politician
            F_M_POLITICIAN_TYPE             = 0b000_011_00000000_00000000, // mask for politician types
            // politician specific flag constants
            F_V_POLITICIAN_LOST             = 0b101_000_00000000_00000000, // indicates that politician does not know spawnId
            // slanderer specific flag constants
            F_V_SLANDERER_PANIC             = 0b101_000_00000000_00000000; // indicates that slanderer is being threatened and communicates own location

    // building protocol constants
    public static final int
            UNPROTECTED_ROUNDS = 50,
            POLITICIAN_POWER_PER_SLANDERER = 10,
            EXTRA_POLITICIAN_POWER = 15;

    public static final float
            LOCAL_MUCKRAKER_DENSITY = 0.040f,
            MAP_MUCKRAKER_DENSITY = 0.035f;

    // generated by a script
    public static final int[] SLANDERER_INFLUENCES = new int[]{21, 41, 63, 85, 107, 130, 154, 178, 203, 228, 255, 282, 310, 339, 368, 399, 431, 463, 497, 532, 568, 605, 643, 683, 724, 766, 810, 855, 902, 949};

    /**
     * Calculates influence generated by a slanderer of the specified influence per turn when embezzling.
     */
    public static int slandererEmbezzle(int influence) {
        return (int) ((0.02 + 0.03 * Math.exp(-0.001 * influence)) * influence);
    }

}
